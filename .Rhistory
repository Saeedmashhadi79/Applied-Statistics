# Upload noisy data
noisycurve <- read.table("noisycurvebis.txt",header=T)
head(noisycurve)
dim(noisycurve)
NT <- length(abscissa) # number of locations of observations
Xobs0 <- noisycurve$X0
abscissa <- noisycurve$Abscissa
NT <- length(abscissa) # number of locations of observations
plot(abscissa,Xobs0,xlab="t",ylab="observed data")
plot(abscissa,Xobs0,xlab="t",ylab="observed data", type = "l")
# Upload true data (without noise)
# X0 contains the values of the true curve
# X1 contains the values of the true first derivative
# X2 contains the values of the true second derivative
truecurve <- read.table("truecurve.txt",header=T)
head(truecurve)
points(abscissa,truecurve$X0vera,type="l", col = 2, lwd = 2)
NT
head(truecurve)
points(abscissa,truecurve$X0vera,type="l", col = 2, lwd = 2)
# compute the central finite differences
rappincX1 <- (Xobs0[3:NT]-Xobs0[1:(NT-2)])/(abscissa[3:NT]-abscissa[1:(NT-2)])
rappincX2 <- ((Xobs0[3:NT]-Xobs0[2:(NT-1)])/(abscissa[3:NT]-abscissa[2:(NT-1)])-(Xobs0[2:(NT-1)]-Xobs0[1:(NT-2)])/(abscissa[2:(NT-1)]-abscissa[1:(NT-2)]))*2/(abscissa[3:(NT)]-abscissa[1:(NT-2)])
par(mfrow=c(1,3))
plot(abscissa,Xobs0,xlab="t",ylab="observed data",type="l")
plot(abscissa[2:(NT-1)],rappincX1,xlab="t",ylab="first differences x",type="l")
plot(abscissa[2:(NT-1)],rappincX2,xlab="t",ylab="second differences x",type="l")
par(mfrow=c(1,3))
plot(abscissa,Xobs0,xlab="t",ylab="observed data",main = "function")
points(truecurve$Abscissa,truecurve$X0vera,type='l',col="orange",lwd=3)
legend("topleft", legend = c("noisy data","true curve"), col = c("black", "orange"), lwd = c(1,2))
plot(abscissa[2:(NT-1)],rappincX1,xlab="t",ylab="first differences x",type="l",main = "1st derivative")
points(truecurve$Abscissa,truecurve$X1vera,type='l',col="orange",lwd=3)
plot(abscissa[2:(NT-1)],rappincX2,xlab="t",ylab="second differences x",type="l",main = "2nd derivative")
points(truecurve$Abscissa,truecurve$X2vera,type='l',col="orange",lwd=3)
# Load package fda
library(fda)
# Set parameters
m <- 5           # spline order
degree <- m-1    # spline degree
nbasis <- 9
# Create the basis
help(create.bspline.basis)
basis <- create.bspline.basis(rangeval=c(0,1), nbasis=nbasis, norder=m)
# If breaks are not provided, equally spaced knots are created
names(basis)
basis
plot(basis)
plot(basis)
# Evaluate the basis on the grid of abscissa
basismat <- eval.basis(abscissa, basis)
basismat
head(basismat)
tail(basismat)
# Fit via LS
help(lsfit)
dim(basismat) # number of data x number of basis
head(basismat)
est_coef = lsfit(basismat, Xobs0, intercept=FALSE)$coef
est_coef = lsfit(basismat, Xobs0, intercept=FALSE)$coef
est_coef
par(mfrow=c(1,1))
plot(abscissa,Xobs0,xlab="t",ylab="observed data")
points(abscissa,Xsp0 ,type="l",col="blue",lwd=2)
basismat
head(basismat)
est_coef
Xsp0 <- basismat %*% est_coef
par(mfrow=c(1,1))
plot(abscissa,Xobs0,xlab="t",ylab="observed data")
points(abscissa,Xsp0 ,type="l",col="blue",lwd=2)
abline(v=basis$params)
# to obtain the first derivative (argument Lfdobj=1)
basismat1<- eval.basis(abscissa, basis, Lfdobj=1)
head(basismat1)
Xsp1 <- basismat1 %*% est_coef
# to obtain the second derivative (argument Lfdobj=2)
basismat2<- eval.basis(abscissa, basis, Lfdobj=2)
Xsp2 <- basismat2 %*% est_coef
par(mfrow=c(1,3))
plot(abscissa,Xobs0,xlab="t",ylab="observed data")
points(abscissa,truecurve$X0vera ,type="l",col="orange",lwd=3)
points(abscissa,Xsp0 ,type="l",col="blue",lwd=2)
legend("topleft", legend = c("noisy data","true curve","estimated curve"), col = c("black", "orange","blue"), lwd = c(1,3,2))
plot(abscissa[2:(NT-1)],rappincX1,xlab="t",ylab="first differences x",type="l")
points(truecurve$Abscissa,truecurve$X1vera,type='l',col="orange",lwd=3)
points(abscissa,Xsp1 ,type="l",col="blue",lwd=2)
plot(abscissa[2:(NT-1)],rappincX2,xlab="t",ylab="second differences x",type="l")
points(truecurve$Abscissa,truecurve$X2vera,type='l',col="orange",lwd=3)
points(abscissa,Xsp2 ,type="l",col="blue",lwd=2)
############################
# alternative code
help(smooth.basis)
Xsp <- smooth.basis(argvals=abscissa, y=Xobs0, fdParobj=basis)
############################
# alternative code
help(smooth.basis)
Xsp <- smooth.basis(argvals=abscissa, y=Xobs0, fdParobj=basis)
Xsp0bis <- eval.fd(abscissa, Xsp$fd) #  the curve smoothing the data
Xsp1bis <- eval.fd(abscissa, Xsp$fd, Lfd=1) # first derivative
Xsp2bis <- eval.fd(abscissa, Xsp$fd, Lfd=2) # second derivative
df <- Xsp$df   #  the degrees of freedom in the smoothing curve
df             #  for regression splines the df are the number of basis
############################
dev.off()
Xsp
nbasis <- 7
basisbis <- create.bspline.basis(c(0,1), nbasis, m)
par(mfrow=c(1,1))
plot(basisbis)
basismatbis <- eval.basis(abscissa, basisbis)
Xsp0bis <- basismatbis %*% lsfit(basismatbis, Xobs0, intercept=FALSE)$coef
basismat1bis <- eval.basis(abscissa, basisbis,Lfdobj=1)
Xsp1bis <- basismat1bis %*% lsfit(basismatbis, Xobs0, intercept=FALSE)$coef
basismat2bis <- eval.basis(abscissa, basisbis,Lfdobj=2)
Xsp2bis <- basismat2bis %*% lsfit(basismatbis, Xobs0, intercept=FALSE)$coef
par(mfrow=c(1,1))
plot(abscissa,Xobs0,xlab="t",ylab="observed data")
points(abscissa,Xsp0bis ,type="l",col="green",lwd=2)
abline(v=basisbis$params,lty=2)
par(mfrow=c(1,3))
plot(abscissa,Xobs0,xlab="t",ylab="observed data")
points(abscissa,Xsp0bis ,type="l",col="green",lwd=2)
points(abscissa,Xsp0 ,type="l",col="blue",lwd=2)
legend("topleft", legend = c("noisy data","estimate df = 7","estimate df = 9"), col = c("black", "green","blue"), lwd = c(1,2,2))
plot(abscissa[2:(NT-1)],rappincX1,xlab="t",ylab="first differences x",type="l")
points(abscissa,Xsp1bis ,type="l",col="green",lwd=2)
points(abscissa,Xsp1 ,type="l",col="blue",lwd=2)
plot(abscissa[2:(NT-1)],rappincX2,xlab="t",ylab="second differences x",type="l")
points(abscissa,Xsp2bis ,type="l",col="green",lwd=2)
points(abscissa,Xsp2 ,type="l",col="blue",lwd=2)
nbasis <- 30
basister <- create.bspline.basis(c(0,1), nbasis, m)
par(mfrow=c(1,1))
plot(basister)
basismatter <- eval.basis(abscissa, basister)
Xsp0ter <- basismatter %*% lsfit(basismatter, Xobs0, intercept=FALSE)$coef
basismat1ter <- eval.basis(abscissa, basister,Lfdobj=1)
Xsp1ter <- basismat1ter %*% lsfit(basismatter, Xobs0, intercept=FALSE)$coef
basismat2ter <- eval.basis(abscissa, basister,Lfdobj=2)
Xsp2ter <- basismat2ter %*% lsfit(basismatter, Xobs0, intercept=FALSE)$coef
par(mfrow=c(1,1))
plot(abscissa,Xobs0,xlab="t",ylab="observed data")
points(abscissa,Xsp0ter ,type="l",col="red",lwd=2)
abline(v=basister$params,lty=2)
par(mfrow=c(1,3))
plot(abscissa,Xobs0,xlab="t",ylab="observed data")
points(abscissa,Xsp0ter ,type="l",col="red",lwd=2)
points(abscissa,Xsp0bis ,type="l",col="green",lwd=2)
points(abscissa,Xsp0 ,type="l",col="blue",lwd=2)
plot(abscissa[2:(NT-1)],rappincX1,xlab="t",ylab="first differences x",type="l")
points(abscissa,Xsp1ter ,type="l",col="red",lwd=2)
points(abscissa,Xsp1bis ,type="l",col="green",lwd=2)
points(abscissa,Xsp1 ,type="l",col="blue",lwd=2)
plot(abscissa[2:(NT-1)],rappincX2,xlab="t",ylab="second differences x",type="l")
points(abscissa,Xsp2ter ,type="l",col="red",lwd=2)
points(abscissa,Xsp2bis ,type="l",col="green",lwd=2)
points(abscissa,Xsp2 ,type="l",col="blue",lwd=2)
# generalized cross-validation
nbasis <- 6:30
gcv <- numeric(length(nbasis))
# breaks <- abscissa[((0:50)*2)+1]
breaks <- abscissa
basis <- create.bspline.basis(breaks, norder=m)
functionalPar <- fdPar(fdobj=basis, Lfdobj=3, lambda=1e-8)
Xss <- smooth.basis(abscissa, Xobs0, functionalPar)
Xss0 <- eval.fd(abscissa, Xss$fd, Lfd=0)
Xss1 <- eval.fd(abscissa, Xss$fd, Lfd=1)
Xss2 <- eval.fd(abscissa, Xss$fd, Lfd=2)
df <- Xss$df   #  the degrees of freedom in the smoothing curve
df
gcv <- Xss$gcv  #  the value of the gcv statistic
gcv
par(mfrow=c(1,3))
plot(abscissa,Xobs0,xlab="t",ylab="observed data")
points(abscissa,Xss0 ,type="l",col="blue",lwd=2)
plot(abscissa[2:(NT-1)],rappincX1,xlab="t",ylab="first differences x",type="l")
points(abscissa,Xss1 ,type="l",col="blue",lwd=2)
plot(abscissa[2:(NT-1)],rappincX2,xlab="t",ylab="second differences x",type="l")
points(abscissa,Xss2 ,type="l",col="blue",lwd=2)
# change lambda: 1e-5
functionalParbis <- fdPar(fdobj=basis, Lfdobj=3, lambda=1e-5)
Xssbis <- smooth.basis(abscissa, Xobs0, functionalParbis)
Xss0bis <- eval.fd(abscissa, Xssbis$fd, Lfd=0)
Xss1bis <- eval.fd(abscissa, Xssbis$fd, Lfd=1)
Xss2bis <- eval.fd(abscissa, Xssbis$fd, Lfd=2)
dfbis <- Xssbis$df   #  the degrees of freedom in the smoothing curve
dfbis
gcvbis <- Xssbis$gcv  #  the value of the gcv statistic
gcvbis
gcv
# change lambda: 1e-12
functionalParter <- fdPar(fdobj=basis, Lfdobj=3, lambda=1e-12)
Xsster <- smooth.basis(abscissa, Xobs0, functionalParter)
Xss0ter <- eval.fd(abscissa, Xsster$fd, Lfd=0)
Xss1ter <- eval.fd(abscissa, Xsster$fd, Lfd=1)
Xss2ter <- eval.fd(abscissa, Xsster$fd, Lfd=2)
dfter <- Xsster$df   #  the degrees of freedom in the smoothing curve
dfter
gcvter <- Xsster$gcv  #  the value of the gcv statistic
gcvter
par(mfrow=c(1,3))
plot(abscissa,Xobs0,xlab="t",ylab="observed data")
points(abscissa,Xss0ter ,type="l",col="red",lwd=2)
points(abscissa,Xss0bis ,type="l",col="green",lwd=2)
points(abscissa,Xss0 ,type="l",col="blue",lwd=2)
plot(abscissa[2:(NT-1)],rappincX1,xlab="t",ylab="first differences x",type="l")
points(abscissa,Xss1ter ,type="l",col="red",lwd=2)
points(abscissa,Xss1bis ,type="l",col="green",lwd=2)
points(abscissa,Xss1 ,type="l",col="blue",lwd=2)
plot(abscissa[2:(NT-1)],rappincX2,xlab="t",ylab="second differences x",type="l")
points(abscissa,Xss2ter ,type="l",col="red",lwd=2)
points(abscissa,Xss2bis ,type="l",col="green",lwd=2)
points(abscissa,Xss2 ,type="l",col="blue",lwd=2)
# generalized cross-validation
lambda <- 10^seq(-12,-5,by = 0.5)
gcv <- numeric(length(lambda))
for (i in 1:length(lambda)){
functionalPar <- fdPar(fdobj=basis, Lfdobj=3, lambda=lambda[i])
gcv[i] <- smooth.basis(abscissa, Xobs0, functionalPar)$gcv
}
par(mfrow=c(1,1))
plot(log10(lambda),gcv)
lambda[which.min(gcv)]
# best lambda
functionalParbest <- fdPar(fdobj=basis, Lfdobj=3, lambda=lambda[which.min(gcv)])
Xssbest <- smooth.basis(abscissa, Xobs0, functionalParbest)
Xss0best <- eval.fd(abscissa, Xssbest$fd, Lfd=0)
Xss1best <- eval.fd(abscissa, Xssbest$fd, Lfd=1)
Xss2best <- eval.fd(abscissa, Xssbest$fd, Lfd=2)
dfbest <- Xssbest$df   #  the degrees of freedom in the smoothing curve
dfbest
gcvbest <- Xssbest$gcv  #  the value of the gcv statistic
gcvbest
par(mfrow=c(1,3))
plot(abscissa,Xobs0,xlab="t",ylab="observed data")
points(abscissa,Xss0ter ,type="l",col="red",lwd=1)
points(abscissa,Xss0bis ,type="l",col="green",lwd=1)
points(abscissa,Xss0best ,type="l",col="blue",lwd=2)
plot(abscissa[2:(NT-1)],rappincX1,xlab="t",ylab="first differences x",type="l")
points(abscissa,Xss1ter ,type="l",col="red",lwd=1)
points(abscissa,Xss1bis ,type="l",col="green",lwd=1)
points(abscissa,Xss1best ,type="l",col="blue",lwd=2)
plot(abscissa[2:(NT-1)],rappincX2,xlab="t",ylab="second differences x",type="l")
points(abscissa,Xss2ter ,type="l",col="red",lwd=1)
points(abscissa,Xss2bis ,type="l",col="green",lwd=1)
points(abscissa,Xss2best ,type="l",col="blue",lwd=2)
# We carry out a monotone smoothing
help(smooth.monotone)
help(growth)
names(growth)
matplot(growth$age, growth$hgtf, type = "l")
matplot(growth$age, growth$hgtf, type = "l")
age <- growth$age
heightbasis12 <- create.bspline.basis(rangeval = c(1,18), nbasis = 12, norder = 6)
basismat <- eval.basis(evalarg = growth$age, basisobj = heightbasis12)
heightmat <- growth$hgtf
heightcoef <- lsfit(x = basismat, y = heightmat, intercept=FALSE)$coef
height <- basismat %*% lsfit(basismat, heightmat, intercept=FALSE)$coef
basismat1 <- eval.basis(evalarg = growth$age, basisobj = heightbasis12,
Lfdobj=1)
heightvelocity <- basismat1 %*% lsfit(x = basismat, y = heightmat,
intercept=FALSE)$coef
basismat2 <- eval.basis(evalarg = growth$age, basisobj = heightbasis12,Lfdobj=2)
heightacceleration <- basismat2 %*% lsfit(x=basismat, y= heightmat, intercept=FALSE)$coef
par(mfrow=c(1,3))
matplot(age,height,type="l" )
matplot(age,heightvelocity,type="l" )
length(age)
